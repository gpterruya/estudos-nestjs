// üìò Aula 5 ‚Äì Separando Regras e Preparando para o Banco de Dados

// Hoje voc√™ vai aprender:

// 1. O que √© um reposit√≥rio
// 2. Como separar a l√≥gica de dados do Service
// 3. A preparar a aplica√ß√£o para usar TypeORM ou Prisma
// 4. Como simular um reposit√≥rio antes de ter um banco real

// üß† 1. O que √© um reposit√≥rio?

// Um reposit√≥rio √© respons√°vel por acessar os dados (buscar, criar, atualizar, deletar). Ele isola a l√≥gica de acesso aos dados, facilitando testes e mudan√ßas (como trocar o array por banco real).

// Em resumo:

// - Controller: recebe a requisi√ß√£o e chama o Service
// - Service: cont√©m regras de neg√≥cio
// - Repository: lida com os dados

// üèóÔ∏è 2. Estrutura do que vamos criar

// src/users/
// ‚îú‚îÄ‚îÄ dto/
// ‚îÇ   ‚îú‚îÄ‚îÄ create-user.dto.ts
// ‚îÇ   ‚îî‚îÄ‚îÄ update-user.dto.ts
// ‚îú‚îÄ‚îÄ entities/
// ‚îÇ   ‚îî‚îÄ‚îÄ user.entity.ts      üëà novo
// ‚îú‚îÄ‚îÄ users.controller.ts
// ‚îú‚îÄ‚îÄ users.module.ts
// ‚îú‚îÄ‚îÄ users.service.ts
// ‚îú‚îÄ‚îÄ users.repository.ts     üëà novo

// üß± 3. Criando a entidade User

// Crie o arquivo src/users/entities/user.entity.ts:

export class User {
  id: number;
  name: string;
  email: string;
  password: string;
}

// üíæ 4. Criando o UsersRepository

// Crie o arquivo src/users/users.repository.ts:

import { Injectable } from '@nestjs/common';
import { User } from './entities/user.entity';
import { CreateUserDto } from './dto/create-user.dto';
import { UpdateUserDto } from './dto/update-user.dto';

@Injectable()
export class UsersRepository {
  private users: User[] = [];
  private nextId = 1;

  create(dto: CreateUserDto): User {
    const user: User = {
      id: this.nextId++,
      ...dto,
    };
    this.users.push(user);
    return user;
  }

  findAll(): User[] {
    return this.users;
  }

  findOne(id: number): User | undefined {
    return this.users.find((u) => u.id === id);
  }

  update(id: number, dto: UpdateUserDto): User | undefined {
    const index = this.users.findIndex((u) => u.id === id);
    if (index === -1) return undefined;
    this.users[index] = {
      ...this.users[index],
      ...dto,
    };
    return this.users[index];
  }

  remove(id: number): User | undefined {
    const index = this.users.findIndex((u) => u.id === id);
    if (index === -1) return undefined;
    return this.users.splice(index, 1)[0];
  }
}

// üîÅ 5. Refatorando o UsersService

// Abra users.service.ts:

import { Injectable, NotFoundException } from '@nestjs/common';
import { CreateUserDto } from './dto/create-user.dto';
import { UpdateUserDto } from './dto/update-user.dto';
import { UsersRepository } from './users.repository';

@Injectable()
export class UsersService {
  constructor(private readonly repo: UsersRepository) {}

  create(dto: CreateUserDto) {
    const user = this.repo.create(dto);
    return {
      message: 'Usu√°rio criado com sucesso!',
      user,
    };
  }

  findAll() {
    return this.repo.findAll();
  }

  findOne(id: number) {
    const user = this.repo.findOne(id);
    if (!user) throw new NotFoundException(`Usu√°rio ${id} n√£o encontrado`);
    return user;
  }

  update(id: number, dto: UpdateUserDto) {
    const user = this.repo.update(id, dto);
    if (!user) throw new NotFoundException(`Usu√°rio ${id} n√£o encontrado`);
    return {
      message: 'Usu√°rio atualizado!',
      user,
    };
  }

  remove(id: number) {
    const user = this.repo.remove(id);
    if (!user) throw new NotFoundException(`Usu√°rio ${id} n√£o encontrado`);
    return {
      message: 'Usu√°rio deletado!',
      user,
    };
  }
}

// üß© 6. Registrando o reposit√≥rio no m√≥dulo

// Abra users.module.ts e adicione o UsersRepository no providers:

import { Module } from '@nestjs/common';
import { UsersController } from './users.controller';
import { UsersService } from './users.service';
import { UsersRepository } from './users.repository';

@Module({
  controllers: [UsersController],
  providers: [UsersService, UsersRepository],
})
export class UsersModule {}

// üîå 7. Preparando para usar um banco real (TypeORM ou Prisma)

// Agora que sua l√≥gica de dados est√° separada, trocar o reposit√≥rio para banco real ser√° f√°cil.

// Com TypeORM (exemplo futuro):

// - Criar UserEntity com decorators (@Entity(), @Column())
// - Trocar o UsersRepository para usar @InjectRepository(UserEntity)

// Com Prisma:

// - Instalar Prisma, gerar client
// - Criar um PrismaService
// - Substituir m√©todos do reposit√≥rio pelos do prisma.user

// üëâ Vamos fazer isso na pr√≥xima aula!

// ‚úÖ Recapitulando (Quinta aula)

// | Conceito                       | Explica√ß√£o                                 |
// | ------------------------------ | ------------------------------------------ |
// | Reposit√≥rio                    | Lida com persist√™ncia de dados             |
// | Entidade (`User`)              | Define a estrutura do objeto salvo ou lido |
// | Service                        | Regras de neg√≥cio; chama o reposit√≥rio     |
// | Separa√ß√£o de responsabilidades | Controller ‚Üí Service ‚Üí Repository          |
// | Prepara√ß√£o para banco          | Facilita trocar array por banco real       |
